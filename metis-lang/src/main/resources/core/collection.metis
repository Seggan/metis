let global collection = {}

let iterator = {}

fn iterator.next(self)
    let res = self.coll[self.index]
    self.index += 1
    return res
end

fn iterator.hasNext(self) = self.index < self.coll.size()

fn collection.__iter__(self) = withMetatable({ "coll" = self, "index" = 0 }, iterator)

fn collection.__eq__(self, other)
    if type(self) != type(other) or self.size() != other.size()
        return false
    end
    for i in 0..<self.size()
        if self[i] != other[i]
            return false
        end
    end
    return true
end

fn collection.map(self, f)
    let res = list.new(self.size())
    for v in self
        res.append(f(v))
    end
    return res
end

fn collection.filter(self, f)
    let res = []
    for v in self
        if f(v)
            res.append(v)
        end
    end
    return res
end

fn collection.reduce(self, f, init)
    let res = init
    for v in self
        res = f(res, v)
    end
    return res
end

fn collection.sum(self)
    let res = 0
    for v in self
        res += v
    end
    return res
end

fn collection.any(self, f)
    for v in self
        if f(v)
            return true
        end
    end
    return false
end

fn collection.all(self, f)
    for v in self
        if not f(v)
            return false
        end
    end
    return true
end

fn collection.first(self, f)
    if f is null
        return self[0]
    end
    for v in self
        if f(v)
            return v
        end
    end
    return null
end

fn collection.last(self, f)
    if f is null
        return self[self.size() - 1]
    end

    let i = self.size() - 1
    while i >= 0
        if f(self[i])
            return self[i]
        end
        i -= 1
    end
    return null
end

fn collection.getOrDefault(self, i, def)
    if i < 0 or i >= self.size()
        return def
    end
    return self[i]
end

fn collection.isEmpty(self) = self.size() == 0