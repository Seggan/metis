let global range = {}
range.metatable = collection

fn range.__index__(self, i)
    if type(i) == "number"
        return self.start + i * self.step
    else
        return table["__index__"](self, i)
    end
end

fn range.__str__(self)
    return "range(" + str(self.start) + ", " + str(self.stop) + ", " + str(self.step) + ")"
end

fn range.size(self) = (self.stop - self.start) / self.step

fn range.exclusive(start, stop, step) = withMetatable({
    "start" = start,
    "stop" = stop,
    "step" = step
}, range)

fn range.inclusive(start, stop, step) = range.exclusive(start, stop + step, step)

fn number.__range__(self, other) = range.exclusive(self, other, 1)
fn number.__inclRange__(self, other) = range.inclusive(self, other, 1)

fn range.reverse(self) = range.exclusive(self.stop - self.step, self.start - self.step, -self.step)