let parser = {}

let numberChars = "0123456789.eE+-"
fn parser.parseNumber(self)
    let sb = string.builder()
    while self.pos < self.len
        let c = self.text[self.pos]
        if c in numberChars
            sb.append(c)
            self.pos = self.pos + 1
        else
            break
        end
    end
    return number.parse(str(sb))
end

fn parser.parseString(self)
    let sb = string.builder()
    self.pos = self.pos + 1
    while true
        let next = self.text[self.pos]
        self.pos = self.pos + 1
        if next == "\""
            break
        elif next == "\\"
            self.pos = self.pos + 1
            let c = self.text[self.pos]
            if c == "\""
                sb.append("\"")
            elif c == "\\"
                sb.append("\\")
            elif c == "/"
                sb.append("/")
            elif c == "b"
                sb.append("\b")
            elif c == "f"
                sb.append("\f")
            elif c == "n"
                sb.append("\n")
            elif c == "r"
                sb.append("\r")
            elif c == "t"
                sb.append("\t")
            elif c == "u"
                self.pos = self.pos + 1
                let hex = self.text.sub(self.pos, self.pos + 4)
                self.pos = self.pos + 4
                sb.append(number.parse(hex, 16).char())
            else
                raise error ParseError("Invalid escape sequence: " + c + " (at position " + str(self.pos) + ")")
                    : { "sequence" = c }
            end
        else
            sb.append(next)
        end
    end
    return str(sb)
end

fn parser.parseArray(self)
    let result = []
    self.pos = self.pos + 1
    while true
        self.skipWhitespace()
        if self.text[self.pos] == "]"
            self.pos = self.pos + 1
            break
        end
        result.append(self.parseValue())
        self.skipWhitespace()
        if self.text[self.pos] == "]"
            self.pos = self.pos + 1
            break
        elif self.text[self.pos] == ","
            self.pos = self.pos + 1
        else
            raise error ParseError("Expected ',' or ']' at " + str(self.pos)) : { "pos" = self.pos }
        end
    end
    return result
end

fn parser.parseObject(self)
    let result = {}
    self.pos = self.pos + 1
    while true
        self.skipWhitespace()
        if self.text[self.pos] == "}"
            self.pos = self.pos + 1
            break
        end
        let key = self.parseString()
        self.skipWhitespace()
        if self.text[self.pos] != ":"
            raise error ParseError("Expected ':' at " + str(self.pos)) : { "pos" = self.pos }
        end
        self.pos = self.pos + 1
        self.skipWhitespace()
        let value = self.parseValue()
        result[key] = value
        self.skipWhitespace()
        if self.text[self.pos] == "}"
            self.pos = self.pos + 1
            break
        elif self.text[self.pos] == ","
            self.pos = self.pos + 1
        else
            raise error ParseError("Expected ',' or '}' at " + str(self.pos)) : { "pos" = self.pos }
        end
    end
    return result
end

fn parser.parseValue(self)
    self.skipWhitespace()
    let c = self.text[self.pos]
    if c == "{"
        return self.parseObject()
    elif c == "["
        return self.parseArray()
    elif c == "\""
        return self.parseString()
    elif c in numberChars
        return self.parseNumber()
    elif self.text.sub(self.pos, self.pos + 4) == "true"
        self.pos = self.pos + 4
        return true
    elif self.text.sub(self.pos, self.pos + 5) == "false"
        self.pos = self.pos + 5
        return false
    elif self.text.sub(self.pos, self.pos + 4) == "null"
        self.pos = self.pos + 4
        return null
    else
        raise error ParseError("Unexpected character: " + c + " (at position " + str(self.pos) + ")")
            : { "character" = c }
    end
end

fn parser.skipWhitespace(self)
    while self.pos < self.len
        let c = self.text[self.pos]
        if c == " " or c == "\t" or c == "\n" or c == "\r"
            self.pos = self.pos + 1
        else
            break
        end
    end
end

global fn parse(text) = withMetatable({
    "text" = text,
    "pos" = 0,
    "len" = len(text)
}, parser).parseValue()

global fn stringify(value)
    if type(value) == "string"
        return "\"" + value
            .replace("\\", "\\\\")
            .replace("\"", "\\\"")
            .replace("\b", "\\b")
            .replace("\f", "\\f")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\t", "\\t")
            + "\""
    elif type(value) == "number"
        return str(value)
    elif type(value) == "boolean"
        return str(value)
    elif type(value) == "table"
        let sb = string.builder()
        sb.append("{")
        let first = true
        for k in value.keys()
            let v = value[k]
            if first
                first = false
            else
                sb.append(",")
            end
            sb.append(stringify(k))
            sb.append(":")
            sb.append(stringify(v))
        end
        sb.append("}")
        return str(sb)
    elif type(value) == "list"
        let sb = string.builder()
        sb.append("[")
        let first = true
        for v in value
            if first
                first = false
            else
                sb.append(",")
            end
            sb.append(stringify(v))
        end
        sb.append("]")
        return str(sb)
    elif type(value) == "null"
        return "null"
    else
        raise error TypeError("Cannot stringify value of type " + type("value"))
            : { "value" = value }
    end
end